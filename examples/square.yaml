apiVersion: v1
kind: Namespace
metadata:
  name: square

---

# The service account for `square`.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: square
  namespace: square

---

# Define a Role that has sufficient privileges to use all `square`
# features. Trim the role to support your use case, eg "get" and "list" access
# to deployments to monitor deployment drifts.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: square
rules:
- apiGroups: ["", "apps", "rbac.authorization.k8s.io", "extensions"]
  resources:
  - clusterrolebindings
  - clusterroles
  - configmaps
  - daemonsets
  - deployments
  - ingresses
  - namespaces
  - persistentvolumeclaims
  - rolebindings
  - roles
  - secrets
  - services
  - statefulsets
  verbs: ["get", "list", "update", "patch"]

---

# Assign the Role to the service account defined earlier.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: square
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: square
subjects:
- kind: ServiceAccount
  name: square
  namespace: square

---

# Deploy `square` and suspend it for a very long time. You will need to "exec"
# into the container to use it, or use it in your own scripts.
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: square
  namespace: square
spec:
  selector:
    matchLabels:
      app: square
  replicas: 1
  template:
    metadata:
      labels:
        app: square
    spec:
      serviceAccountName: square
      containers:
      - name: square
        image: olitheolix/square:latest
        command: ["sleep", "10000d"]
        imagePullPolicy: Always
      terminationGracePeriodSeconds: 1

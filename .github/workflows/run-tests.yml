name: build

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ master ]

# ----------------------------------------------------------------------------
# Lint code and run unit tests.
#
# On Linux, also start KinD cluster, run the integration tests and upload the
# coverage to CodeCov.
# ----------------------------------------------------------------------------
jobs:
  tests:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Start KinD Cluster
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir ~/bin
          curl -L --output ~/bin/kubectl https://dl.k8s.io/release/v1.25.5/bin/linux/amd64/kubectl
          curl -L --output ~/bin/kind https://kind.sigs.k8s.io/dl/v0.18.0/kind-linux-amd64
          chmod +x ~/bin/kubectl ~/bin/kind

          cd ./integration-test-cluster
          ./start_cluster.sh
          cd ..

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      - name: Install extra dependencies (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          pip install macholib pypiwin32 atomicwrites

      - name: Install Square Dependencies
        run: |
          pipenv install --system --deploy --dev

      - name: Linting and Static Analysis
        run: |
          isort --check-only ./
          pycodestyle ./
          mypy ./

      - name: Unit Tests
        if: matrix.os != 'ubuntu-latest'
        run: |
          pytest --cov=square --ignore=tests/test_integration.py

      # Break if coverage drops below 100%.
      - name: Unit and Integration Tests (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          pytest --cov=square --cov-report=term-missing --cov-report=xml --cov-fail-under=100

      - uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: false

  # ----------------------------------------------------------------------------
  # Use Poetry and PIP to build and install Square on recent Python versions.
  # ----------------------------------------------------------------------------
  examples:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3

      - name: Start KinD Cluster
        run: |
          mkdir ~/bin
          curl -L --output ~/bin/kubectl https://dl.k8s.io/release/v1.25.5/bin/linux/amd64/kubectl
          curl -L --output ~/bin/kind https://kind.sigs.k8s.io/dl/v0.18.0/kind-linux-amd64
          chmod +x ~/bin/kubectl ~/bin/kind

          cd ./integration-test-cluster
          ./start_cluster.sh
          cd ..

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Square
        run: |
          # Install Poetry and build the Python package.
          pip install poetry==1.5.1
          poetry build

          # Install the package. The following shell magic expands to
          # eg `pip install dist/kubernetes-square-1.3.2.tar.gz`
          pip install "dist/kubernetes_square-`poetry version -s`.tar.gz"

          # Invoke Square to ensure it runs.
          square version
      - name: Run Examples
        working-directory: ./examples
        run: |
          python basic_workflow.py
          python custom_callbacks.py
          python multi_cluster.py

  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: latest
      - name: Run Square
        run: |
          docker run --rm latest

  build-binaries:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv pyinstaller

      - name: Install extra dependencies (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          pip install macholib pypiwin32 atomicwrites

      - name: Build Binary
        run: |
          pipenv install --system --deploy --dev
          pyinstaller square.spec --clean

          # Verify that binary runs.
          dist/square version

apiVersion: v1
kind: Namespace
metadata:
  name: square-tests-1
  labels:
    app: demoapp-1
spec:
 finalizers:
 - kubernetes

---

apiVersion: v1
kind: Secret
metadata:
  name: demo-secret-1
  namespace: square-tests-1
  labels:
    app: demoapp-1
data:
  mysecret: blah
type: Opaque

---

apiVersion: v1
data:
  version: v1
kind: ConfigMap
metadata:
  name: demo-configmap-1
  namespace: square-tests-1
  labels:
    app: demoapp-1

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: demoapp-1
  namespace: square-tests-1
  labels:
    app: demoapp-1
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: demoapp-1-spawned
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: demoapp-1-spawned
        tag: v1
    spec:
      containers:
        - name: demoapp
          image: alpine:latest
          imagePullPolicy: Always
          command: ["sleep", "100d"]
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate

---

apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: hello-1
  namespace: square-tests-1
  labels:
    app: demoapp-1
spec:
  schedule: "*/1 * * * *"
  successfulJobsHistoryLimit: 3
  suspend: false
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      creationTimestamp: null
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          dnsPolicy: ClusterFirst
          containers:
          - name: hello
            image: busybox
            imagePullPolicy: Always
            args:
            - /bin/sh
            - -c
            - date; echo "Hello, World!"
            imagePullPolicy: Always
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          restartPolicy: OnFailure
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: demoapp-1
  namespace: square-tests-1
  labels:
    app: demoapp-1
  annotations:
    deprecated.daemonset.template.generation: '1'
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: demoapp-1
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: demoapp-1
        tag: v1
    spec:
      containers:
        - name: demoapp
          image: alpine:latest
          imagePullPolicy: Always
          command: ["sleep", "100d"]
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate

---

# The service account for `square`.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: square-1
  namespace: square-tests-1
  labels:
    app: demoapp-1

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: square-1
  namespace: square-tests-1
  labels:
    app: demoapp-1
rules:
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get", "list", "update", "patch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: square-1
  namespace: square-tests-1
  labels:
    app: demoapp-1
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: square-1
subjects:
- kind: ServiceAccount
  name: square-1
  namespace: square

---

apiVersion: v1
kind: Service
metadata:
  name: demoapp-1
  namespace: square-tests-1
  labels:
    app: demoapp-1
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: demoapp-1
  type: ClusterIP

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: demoapp-1
  namespace: square-tests-1
  labels:
    app: demoapp-1
spec:
  rules:
  - host: example.com
    http:
      paths:
      - backend:
          serviceName: demoapp
          servicePort: 80
        path: /

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: demoapp-1
  namespace: square-tests-1
  labels:
    app: demoapp-1

---

apiVersion: v1
kind: Secret
metadata:
  name: mysecret-1
  namespace: square-tests-1
type: Opaque
data:
  username: YWRtaW4=
  password: MWYyZDFlMmU2N2Rm

---

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: demoapp-1
  namespace: square-tests-1
  labels:
    app: demoapp-1
spec:
  maxReplicas: 1
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: demoapp-1
  targetCPUUtilizationPercentage: 80

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: demoapp-1
  namespace: square-tests-1
  labels:
    app: demoapp-1
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: demoapp-1
  serviceName: "demoapp"
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: demoapp-1
        tag: v1
    spec:
      containers:
        - name: demoapp
          image: alpine:latest
          imagePullPolicy: Always
          command: ["sleep", "100d"]
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: demoapp-1
  namespace: square-tests-1
  labels:
    app: demoapp-1
  annotations:
    volume.beta.kubernetes.io/storage-provisioner: k8s.io/minikube-hostpath
  finalizers:
  - kubernetes.io/pvc-protection

spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  volumeMode: Block
  resources:
    requests:
      storage: 10Mi

---

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: demoapp-1
  namespace: square-tests-1
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      name: demoapp-1

---

apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: democrds.mycrd.com
  labels:
    app: demoapp-1
spec:
  conversion:
    strategy: None
  group: mycrd.com
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
  preserveUnknownFields: true
  scope: Namespaced
  names:
    plural: democrds
    singular: democrd
    kind: DemoCRD
    listKind: DemoCRDList
    shortNames:
    - democrd
  validation:
    openAPIV3Schema:
      type: object
      properties:
        spec:
          type: object
          properties:
            fooStr:
              type: string
            fooInt:
              type: integer

---

apiVersion: mycrd.com/v1
kind: DemoCRD
metadata:
  name: democrd
  namespace: square-tests-1
  labels:
    app: demoapp-1
spec:
  fooStr: 'some-string'
  fooInt: 123
